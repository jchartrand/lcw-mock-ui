{"version":3,"file":"static/js/362.50ed56dc.chunk.js","mappings":"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","sources":["../node_modules/ky/source/errors/HTTPError.ts","../node_modules/ky/source/errors/TimeoutError.ts","../node_modules/ky/source/utils/is.ts","../node_modules/ky/source/utils/merge.ts","../node_modules/ky/source/core/constants.ts","../node_modules/ky/source/utils/normalize.ts","../node_modules/ky/source/core/Ky.ts","../node_modules/ky/source/utils/delay.ts","../node_modules/ky/source/utils/options.ts","../node_modules/ky/source/utils/timeout.ts","../node_modules/ky/source/index.ts"],"sourcesContent":["import type {NormalizedOptions} from '../types/options.js';\n\n// eslint-lint-disable-next-line @typescript-eslint/naming-convention\nexport class HTTPError extends Error {\n\tpublic response: Response;\n\tpublic request: Request;\n\tpublic options: NormalizedOptions;\n\n\tconstructor(response: Response, request: Request, options: NormalizedOptions) {\n\t\tconst code = (response.status || response.status === 0) ? response.status : '';\n\t\tconst title = response.statusText || '';\n\t\tconst status = `${code} ${title}`.trim();\n\t\tconst reason = status ? `status code ${status}` : 'an unknown error';\n\n\t\tsuper(`Request failed with ${reason}`);\n\n\t\tthis.name = 'HTTPError';\n\t\tthis.response = response;\n\t\tthis.request = request;\n\t\tthis.options = options;\n\t}\n}\n","export class TimeoutError extends Error {\n\tpublic request: Request;\n\n\tconstructor(request: Request) {\n\t\tsuper('Request timed out');\n\t\tthis.name = 'TimeoutError';\n\t\tthis.request = request;\n\t}\n}\n","// eslint-disable-next-line @typescript-eslint/ban-types\nexport const isObject = (value: unknown): value is object => value !== null && typeof value === 'object';\n","import type {KyHeadersInit, Options} from '../types/options.js';\nimport {isObject} from './is.js';\n\nexport const validateAndMerge = (...sources: Array<Partial<Options> | undefined>): Partial<Options> => {\n\tfor (const source of sources) {\n\t\tif ((!isObject(source) || Array.isArray(source)) && source !== undefined) {\n\t\t\tthrow new TypeError('The `options` argument must be an object');\n\t\t}\n\t}\n\n\treturn deepMerge({}, ...sources);\n};\n\nexport const mergeHeaders = (source1: KyHeadersInit = {}, source2: KyHeadersInit = {}) => {\n\tconst result = new globalThis.Headers(source1 as RequestInit['headers']);\n\tconst isHeadersInstance = source2 instanceof globalThis.Headers;\n\tconst source = new globalThis.Headers(source2 as RequestInit['headers']);\n\n\tfor (const [key, value] of source.entries()) {\n\t\tif ((isHeadersInstance && value === 'undefined') || value === undefined) {\n\t\t\tresult.delete(key);\n\t\t} else {\n\t\t\tresult.set(key, value);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n// TODO: Make this strongly-typed (no `any`).\nexport const deepMerge = <T>(...sources: Array<Partial<T> | undefined>): T => {\n\tlet returnValue: any = {};\n\tlet headers = {};\n\n\tfor (const source of sources) {\n\t\tif (Array.isArray(source)) {\n\t\t\tif (!Array.isArray(returnValue)) {\n\t\t\t\treturnValue = [];\n\t\t\t}\n\n\t\t\treturnValue = [...returnValue, ...source];\n\t\t} else if (isObject(source)) {\n\t\t\tfor (let [key, value] of Object.entries(source)) {\n\t\t\t\tif (isObject(value) && key in returnValue) {\n\t\t\t\t\tvalue = deepMerge(returnValue[key], value);\n\t\t\t\t}\n\n\t\t\t\treturnValue = {...returnValue, [key]: value};\n\t\t\t}\n\n\t\t\tif (isObject((source as any).headers)) {\n\t\t\t\theaders = mergeHeaders(headers, (source as any).headers);\n\t\t\t\treturnValue.headers = headers;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn returnValue;\n};\n","import type {Expect, Equal} from '@type-challenges/utils';\nimport {type HttpMethod, type KyOptionsRegistry} from '../types/options.js';\nimport {type RequestInitRegistry} from '../types/request.js';\n\nexport const supportsRequestStreams = (() => {\n\tlet duplexAccessed = false;\n\tlet hasContentType = false;\n\tconst supportsReadableStream = typeof globalThis.ReadableStream === 'function';\n\tconst supportsRequest = typeof globalThis.Request === 'function';\n\n\tif (supportsReadableStream && supportsRequest) {\n\t\thasContentType = new globalThis.Request('https://empty.invalid', {\n\t\t\tbody: new globalThis.ReadableStream(),\n\t\t\tmethod: 'POST',\n\t\t\t// @ts-expect-error - Types are outdated.\n\t\t\tget duplex() {\n\t\t\t\tduplexAccessed = true;\n\t\t\t\treturn 'half';\n\t\t\t},\n\t\t}).headers.has('Content-Type');\n\t}\n\n\treturn duplexAccessed && !hasContentType;\n})();\n\nexport const supportsAbortController = typeof globalThis.AbortController === 'function';\nexport const supportsResponseStreams = typeof globalThis.ReadableStream === 'function';\nexport const supportsFormData = typeof globalThis.FormData === 'function';\n\nexport const requestMethods = ['get', 'post', 'put', 'patch', 'head', 'delete'] as const;\n\nconst validate = <T extends Array<true>>() => undefined as unknown as T;\nvalidate<[\n\tExpect<Equal<typeof requestMethods[number], HttpMethod>>,\n]>();\n\nexport const responseTypes = {\n\tjson: 'application/json',\n\ttext: 'text/*',\n\tformData: 'multipart/form-data',\n\tarrayBuffer: '*/*',\n\tblob: '*/*',\n} as const;\n\n// The maximum value of a 32bit int (see issue #117)\nexport const maxSafeTimeout = 2_147_483_647;\n\nexport const stop = Symbol('stop');\n\nexport const kyOptionKeys: KyOptionsRegistry = {\n\tjson: true,\n\tparseJson: true,\n\tsearchParams: true,\n\tprefixUrl: true,\n\tretry: true,\n\ttimeout: true,\n\thooks: true,\n\tthrowHttpErrors: true,\n\tonDownloadProgress: true,\n\tfetch: true,\n};\n\nexport const requestOptionsRegistry: RequestInitRegistry = {\n\tmethod: true,\n\theaders: true,\n\tbody: true,\n\tmode: true,\n\tcredentials: true,\n\tcache: true,\n\tredirect: true,\n\treferrer: true,\n\treferrerPolicy: true,\n\tintegrity: true,\n\tkeepalive: true,\n\tsignal: true,\n\twindow: true,\n\tdispatcher: true,\n\tduplex: true,\n};\n","import {requestMethods} from '../core/constants.js';\nimport type {HttpMethod} from '../types/options.js';\nimport type {RetryOptions} from '../types/retry.js';\n\nexport const normalizeRequestMethod = (input: string): string =>\n\trequestMethods.includes(input as HttpMethod) ? input.toUpperCase() : input;\n\nconst retryMethods = ['get', 'put', 'head', 'delete', 'options', 'trace'];\n\nconst retryStatusCodes = [408, 413, 429, 500, 502, 503, 504];\n\nconst retryAfterStatusCodes = [413, 429, 503];\n\nconst defaultRetryOptions: Required<RetryOptions> = {\n\tlimit: 2,\n\tmethods: retryMethods,\n\tstatusCodes: retryStatusCodes,\n\tafterStatusCodes: retryAfterStatusCodes,\n\tmaxRetryAfter: Number.POSITIVE_INFINITY,\n\tbackoffLimit: Number.POSITIVE_INFINITY,\n\tdelay: attemptCount => 0.3 * (2 ** (attemptCount - 1)) * 1000,\n};\n\nexport const normalizeRetryOptions = (retry: number | RetryOptions = {}): Required<RetryOptions> => {\n\tif (typeof retry === 'number') {\n\t\treturn {\n\t\t\t...defaultRetryOptions,\n\t\t\tlimit: retry,\n\t\t};\n\t}\n\n\tif (retry.methods && !Array.isArray(retry.methods)) {\n\t\tthrow new Error('retry.methods must be an array');\n\t}\n\n\tif (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n\t\tthrow new Error('retry.statusCodes must be an array');\n\t}\n\n\treturn {\n\t\t...defaultRetryOptions,\n\t\t...retry,\n\t\tafterStatusCodes: retryAfterStatusCodes,\n\t};\n};\n","import {HTTPError} from '../errors/HTTPError.js';\nimport {TimeoutError} from '../errors/TimeoutError.js';\nimport type {Hooks} from '../types/hooks.js';\nimport type {Input, InternalOptions, NormalizedOptions, Options, SearchParamsInit} from '../types/options.js';\nimport {type ResponsePromise} from '../types/ResponsePromise.js';\nimport {deepMerge, mergeHeaders} from '../utils/merge.js';\nimport {normalizeRequestMethod, normalizeRetryOptions} from '../utils/normalize.js';\nimport timeout, {type TimeoutOptions} from '../utils/timeout.js';\nimport delay from '../utils/delay.js';\nimport {type ObjectEntries} from '../utils/types.js';\nimport {findUnknownOptions} from '../utils/options.js';\nimport {\n\tmaxSafeTimeout,\n\tresponseTypes,\n\tstop,\n\tsupportsAbortController,\n\tsupportsFormData,\n\tsupportsResponseStreams,\n\tsupportsRequestStreams,\n} from './constants.js';\n\nexport class Ky {\n\tstatic create(input: Input, options: Options): ResponsePromise {\n\t\tconst ky = new Ky(input, options);\n\n\t\tconst function_ = async (): Promise<Response> => {\n\t\t\tif (typeof ky._options.timeout === 'number' && ky._options.timeout > maxSafeTimeout) {\n\t\t\t\tthrow new RangeError(`The \\`timeout\\` option cannot be greater than ${maxSafeTimeout}`);\n\t\t\t}\n\n\t\t\t// Delay the fetch so that body method shortcuts can set the Accept header\n\t\t\tawait Promise.resolve();\n\t\t\tlet response = await ky._fetch();\n\n\t\t\tfor (const hook of ky._options.hooks.afterResponse) {\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\tconst modifiedResponse = await hook(\n\t\t\t\t\tky.request,\n\t\t\t\t\tky._options as NormalizedOptions,\n\t\t\t\t\tky._decorateResponse(response.clone()),\n\t\t\t\t);\n\n\t\t\t\tif (modifiedResponse instanceof globalThis.Response) {\n\t\t\t\t\tresponse = modifiedResponse;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tky._decorateResponse(response);\n\n\t\t\tif (!response.ok && ky._options.throwHttpErrors) {\n\t\t\t\tlet error = new HTTPError(response, ky.request, (ky._options as unknown) as NormalizedOptions);\n\n\t\t\t\tfor (const hook of ky._options.hooks.beforeError) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\terror = await hook(error);\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\t// If `onDownloadProgress` is passed, it uses the stream API internally\n\t\t\t/* istanbul ignore next */\n\t\t\tif (ky._options.onDownloadProgress) {\n\t\t\t\tif (typeof ky._options.onDownloadProgress !== 'function') {\n\t\t\t\t\tthrow new TypeError('The `onDownloadProgress` option must be a function');\n\t\t\t\t}\n\n\t\t\t\tif (!supportsResponseStreams) {\n\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n\t\t\t\t}\n\n\t\t\t\treturn ky._stream(response.clone(), ky._options.onDownloadProgress);\n\t\t\t}\n\n\t\t\treturn response;\n\t\t};\n\n\t\tconst isRetriableMethod = ky._options.retry.methods.includes(ky.request.method.toLowerCase());\n\t\tconst result = (isRetriableMethod ? ky._retry(function_) : function_()) as ResponsePromise;\n\n\t\tfor (const [type, mimeType] of Object.entries(responseTypes) as ObjectEntries<typeof responseTypes>) {\n\t\t\tresult[type] = async () => {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n\t\t\t\tky.request.headers.set('accept', ky.request.headers.get('accept') || mimeType);\n\n\t\t\t\tconst awaitedResult = await result;\n\t\t\t\tconst response = awaitedResult.clone();\n\n\t\t\t\tif (type === 'json') {\n\t\t\t\t\tif (response.status === 204) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tconst arrayBuffer = await response.clone().arrayBuffer();\n\t\t\t\t\tconst responseSize = arrayBuffer.byteLength;\n\t\t\t\t\tif (responseSize === 0) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.parseJson) {\n\t\t\t\t\t\treturn options.parseJson(await response.text());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn response[type]();\n\t\t\t};\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic request: Request;\n\tprotected abortController?: AbortController;\n\tprotected _retryCount = 0;\n\tprotected _input: Input;\n\tprotected _options: InternalOptions;\n\n\t// eslint-disable-next-line complexity\n\tconstructor(input: Input, options: Options = {}) {\n\t\tthis._input = input;\n\t\tconst isCredentialsSupported = 'credentials' in Request.prototype;\n\t\tthis._options = {\n\t\t\tcredentials: isCredentialsSupported ? (this._input as Request).credentials : undefined,\n\t\t\t...options,\n\t\t\theaders: mergeHeaders((this._input as Request).headers, options.headers),\n\t\t\thooks: deepMerge<Required<Hooks>>(\n\t\t\t\t{\n\t\t\t\t\tbeforeRequest: [],\n\t\t\t\t\tbeforeRetry: [],\n\t\t\t\t\tbeforeError: [],\n\t\t\t\t\tafterResponse: [],\n\t\t\t\t},\n\t\t\t\toptions.hooks,\n\t\t\t),\n\t\t\tmethod: normalizeRequestMethod(options.method ?? (this._input as Request).method),\n\t\t\t// eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n\t\t\tprefixUrl: String(options.prefixUrl || ''),\n\t\t\tretry: normalizeRetryOptions(options.retry),\n\t\t\tthrowHttpErrors: options.throwHttpErrors !== false,\n\t\t\ttimeout: options.timeout ?? 10_000,\n\t\t\tfetch: options.fetch ?? globalThis.fetch.bind(globalThis),\n\t\t};\n\n\t\tif (typeof this._input !== 'string' && !(this._input instanceof URL || this._input instanceof globalThis.Request)) {\n\t\t\tthrow new TypeError('`input` must be a string, URL, or Request');\n\t\t}\n\n\t\tif (this._options.prefixUrl && typeof this._input === 'string') {\n\t\t\tif (this._input.startsWith('/')) {\n\t\t\t\tthrow new Error('`input` must not begin with a slash when using `prefixUrl`');\n\t\t\t}\n\n\t\t\tif (!this._options.prefixUrl.endsWith('/')) {\n\t\t\t\tthis._options.prefixUrl += '/';\n\t\t\t}\n\n\t\t\tthis._input = this._options.prefixUrl + this._input;\n\t\t}\n\n\t\tif (supportsAbortController) {\n\t\t\tthis.abortController = new globalThis.AbortController();\n\t\t\tif (this._options.signal) {\n\t\t\t\tconst originalSignal = this._options.signal;\n\n\t\t\t\tthis._options.signal.addEventListener('abort', () => {\n\t\t\t\t\tthis.abortController!.abort(originalSignal.reason);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._options.signal = this.abortController.signal;\n\t\t}\n\n\t\tif (supportsRequestStreams) {\n\t\t\t// @ts-expect-error - Types are outdated.\n\t\t\tthis._options.duplex = 'half';\n\t\t}\n\n\t\tthis.request = new globalThis.Request(this._input, this._options);\n\n\t\tif (this._options.searchParams) {\n\t\t\t// eslint-disable-next-line unicorn/prevent-abbreviations\n\t\t\tconst textSearchParams = typeof this._options.searchParams === 'string'\n\t\t\t\t? this._options.searchParams.replace(/^\\?/, '')\n\t\t\t\t: new URLSearchParams(this._options.searchParams as unknown as SearchParamsInit).toString();\n\t\t\t// eslint-disable-next-line unicorn/prevent-abbreviations\n\t\t\tconst searchParams = '?' + textSearchParams;\n\t\t\tconst url = this.request.url.replace(/(?:\\?.*?)?(?=#|$)/, searchParams);\n\n\t\t\t// To provide correct form boundary, Content-Type header should be deleted each time when new Request instantiated from another one\n\t\t\tif (\n\t\t\t\t((supportsFormData && this._options.body instanceof globalThis.FormData)\n\t\t\t\t\t|| this._options.body instanceof URLSearchParams) && !(this._options.headers && (this._options.headers as Record<string, string>)['content-type'])\n\t\t\t) {\n\t\t\t\tthis.request.headers.delete('content-type');\n\t\t\t}\n\n\t\t\t// The spread of `this.request` is required as otherwise it misses the `duplex` option for some reason and throws.\n\t\t\tthis.request = new globalThis.Request(new globalThis.Request(url, {...this.request}), this._options as RequestInit);\n\t\t}\n\n\t\tif (this._options.json !== undefined) {\n\t\t\tthis._options.body = JSON.stringify(this._options.json);\n\t\t\tthis.request.headers.set('content-type', this._options.headers.get('content-type') ?? 'application/json');\n\t\t\tthis.request = new globalThis.Request(this.request, {body: this._options.body});\n\t\t}\n\t}\n\n\tprotected _calculateRetryDelay(error: unknown) {\n\t\tthis._retryCount++;\n\n\t\tif (this._retryCount <= this._options.retry.limit && !(error instanceof TimeoutError)) {\n\t\t\tif (error instanceof HTTPError) {\n\t\t\t\tif (!this._options.retry.statusCodes.includes(error.response.status)) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tconst retryAfter = error.response.headers.get('Retry-After');\n\t\t\t\tif (retryAfter && this._options.retry.afterStatusCodes.includes(error.response.status)) {\n\t\t\t\t\tlet after = Number(retryAfter);\n\t\t\t\t\tif (Number.isNaN(after)) {\n\t\t\t\t\t\tafter = Date.parse(retryAfter) - Date.now();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tafter *= 1000;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this._options.retry.maxRetryAfter !== undefined && after > this._options.retry.maxRetryAfter) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn after;\n\t\t\t\t}\n\n\t\t\t\tif (error.response.status === 413) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst retryDelay = this._options.retry.delay(this._retryCount);\n\t\t\treturn Math.min(this._options.retry.backoffLimit, retryDelay);\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tprotected _decorateResponse(response: Response): Response {\n\t\tif (this._options.parseJson) {\n\t\t\tresponse.json = async () => this._options.parseJson!(await response.text());\n\t\t}\n\n\t\treturn response;\n\t}\n\n\tprotected async _retry<T extends (...arguments_: any) => Promise<any>>(function_: T): Promise<ReturnType<T> | void> {\n\t\ttry {\n\t\t\treturn await function_();\n\t\t} catch (error) {\n\t\t\tconst ms = Math.min(this._calculateRetryDelay(error), maxSafeTimeout);\n\t\t\tif (ms !== 0 && this._retryCount > 0) {\n\t\t\t\tawait delay(ms, {signal: this._options.signal});\n\n\t\t\t\tfor (const hook of this._options.hooks.beforeRetry) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tconst hookResult = await hook({\n\t\t\t\t\t\trequest: this.request,\n\t\t\t\t\t\toptions: (this._options as unknown) as NormalizedOptions,\n\t\t\t\t\t\terror: error as Error,\n\t\t\t\t\t\tretryCount: this._retryCount,\n\t\t\t\t\t});\n\n\t\t\t\t\t// If `stop` is returned from the hook, the retry process is stopped\n\t\t\t\t\tif (hookResult === stop) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn this._retry(function_);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprotected async _fetch(): Promise<Response> {\n\t\tfor (const hook of this._options.hooks.beforeRequest) {\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tconst result = await hook(this.request, (this._options as unknown) as NormalizedOptions);\n\n\t\t\tif (result instanceof Request) {\n\t\t\t\tthis.request = result;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (result instanceof Response) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\tconst nonRequestOptions = findUnknownOptions(this.request, this._options);\n\n\t\tif (this._options.timeout === false) {\n\t\t\treturn this._options.fetch(this.request.clone(), nonRequestOptions);\n\t\t}\n\n\t\treturn timeout(this.request.clone(), nonRequestOptions, this.abortController, this._options as TimeoutOptions);\n\t}\n\n\t/* istanbul ignore next */\n\tprotected _stream(response: Response, onDownloadProgress: Options['onDownloadProgress']) {\n\t\tconst totalBytes = Number(response.headers.get('content-length')) || 0;\n\t\tlet transferredBytes = 0;\n\n\t\tif (response.status === 204) {\n\t\t\tif (onDownloadProgress) {\n\t\t\t\tonDownloadProgress({percent: 1, totalBytes, transferredBytes}, new Uint8Array());\n\t\t\t}\n\n\t\t\treturn new globalThis.Response(\n\t\t\t\tnull,\n\t\t\t\t{\n\t\t\t\t\tstatus: response.status,\n\t\t\t\t\tstatusText: response.statusText,\n\t\t\t\t\theaders: response.headers,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\treturn new globalThis.Response(\n\t\t\tnew globalThis.ReadableStream({\n\t\t\t\tasync start(controller) {\n\t\t\t\t\tconst reader = response.body!.getReader();\n\n\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\tonDownloadProgress({percent: 0, transferredBytes: 0, totalBytes}, new Uint8Array());\n\t\t\t\t\t}\n\n\t\t\t\t\tasync function read() {\n\t\t\t\t\t\tconst {done, value} = await reader.read();\n\t\t\t\t\t\tif (done) {\n\t\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\t\ttransferredBytes += value.byteLength;\n\t\t\t\t\t\t\tconst percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n\t\t\t\t\t\t\tonDownloadProgress({percent, transferredBytes, totalBytes}, value);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontroller.enqueue(value);\n\t\t\t\t\t\tawait read();\n\t\t\t\t\t}\n\n\t\t\t\t\tawait read();\n\t\t\t\t},\n\t\t\t}),\n\t\t\t{\n\t\t\t\tstatus: response.status,\n\t\t\t\tstatusText: response.statusText,\n\t\t\t\theaders: response.headers,\n\t\t\t},\n\t\t);\n\t}\n}\n","// https://github.com/sindresorhus/delay/tree/ab98ae8dfcb38e1593286c94d934e70d14a4e111\n\nimport {type InternalOptions} from '../types/options.js';\n\nexport type DelayOptions = {\n\tsignal?: InternalOptions['signal'];\n};\n\nexport default async function delay(\n\tms: number,\n\t{signal}: DelayOptions,\n): Promise<void> {\n\treturn new Promise((resolve, reject) => {\n\t\tif (signal) {\n\t\t\tsignal.throwIfAborted();\n\t\t\tsignal.addEventListener('abort', abortHandler, {once: true});\n\t\t}\n\n\t\tfunction abortHandler() {\n\t\t\tclearTimeout(timeoutId);\n\t\t\treject(signal!.reason);\n\t\t}\n\n\t\tconst timeoutId = setTimeout(() => {\n\t\t\tsignal?.removeEventListener('abort', abortHandler);\n\t\t\tresolve();\n\t\t}, ms);\n\t});\n}\n","import {kyOptionKeys, requestOptionsRegistry} from '../core/constants.js';\n\nexport const findUnknownOptions = (\n\trequest: Request,\n\toptions: Record<string, unknown>,\n): Record<string, unknown> => {\n\tconst unknownOptions: Record<string, unknown> = {};\n\n\tfor (const key in options) {\n\t\tif (!(key in requestOptionsRegistry) && !(key in kyOptionKeys) && !(key in request)) {\n\t\t\tunknownOptions[key] = options[key];\n\t\t}\n\t}\n\n\treturn unknownOptions;\n};\n","import {TimeoutError} from '../errors/TimeoutError.js';\n\nexport type TimeoutOptions = {\n\ttimeout: number;\n\tfetch: typeof fetch;\n};\n\n// `Promise.race()` workaround (#91)\nexport default async function timeout(\n\trequest: Request,\n\tinit: RequestInit,\n\tabortController: AbortController | undefined,\n\toptions: TimeoutOptions,\n): Promise<Response> {\n\treturn new Promise((resolve, reject) => {\n\t\tconst timeoutId = setTimeout(() => {\n\t\t\tif (abortController) {\n\t\t\t\tabortController.abort();\n\t\t\t}\n\n\t\t\treject(new TimeoutError(request));\n\t\t}, options.timeout);\n\n\t\tvoid options\n\t\t\t.fetch(request, init)\n\t\t\t.then(resolve)\n\t\t\t.catch(reject)\n\t\t\t.then(() => {\n\t\t\t\tclearTimeout(timeoutId);\n\t\t\t});\n\t});\n}\n","/*! MIT License © Sindre Sorhus */\n\nimport {Ky} from './core/Ky.js';\nimport {requestMethods, stop} from './core/constants.js';\nimport type {KyInstance} from './types/ky.js';\nimport type {Input, Options} from './types/options.js';\nimport {validateAndMerge} from './utils/merge.js';\nimport {type Mutable} from './utils/types.js';\n\nconst createInstance = (defaults?: Partial<Options>): KyInstance => {\n\t// eslint-disable-next-line @typescript-eslint/promise-function-async\n\tconst ky: Partial<Mutable<KyInstance>> = (input: Input, options?: Options) => Ky.create(input, validateAndMerge(defaults, options));\n\n\tfor (const method of requestMethods) {\n\t\t// eslint-disable-next-line @typescript-eslint/promise-function-async\n\t\tky[method] = (input: Input, options?: Options) => Ky.create(input, validateAndMerge(defaults, options, {method}));\n\t}\n\n\tky.create = (newDefaults?: Partial<Options>) => createInstance(validateAndMerge(newDefaults));\n\tky.extend = (newDefaults?: Partial<Options>) => createInstance(validateAndMerge(defaults, newDefaults));\n\tky.stop = stop;\n\n\treturn ky as KyInstance;\n};\n\nconst ky = createInstance();\n\nexport default ky;\n\nexport type {KyInstance} from './types/ky.js';\n\nexport type {\n\tInput,\n\tOptions,\n\tNormalizedOptions,\n\tRetryOptions,\n\tSearchParamsOption,\n\tDownloadProgress,\n} from './types/options.js';\n\nexport type {\n\tHooks,\n\tBeforeRequestHook,\n\tBeforeRetryHook,\n\tBeforeRetryState,\n\tBeforeErrorHook,\n\tAfterResponseHook,\n} from './types/hooks.js';\n\nexport type {ResponsePromise} from './types/ResponsePromise.js';\nexport type {KyResponse} from './types/response.js';\nexport {HTTPError} from './errors/HTTPError.js';\nexport {TimeoutError} from './errors/TimeoutError.js';\n"],"names":["HTTPError","Error","constructor","response","request","options","code","status","title","statusText","concat","trim","reason","super","Object","defineProperty","this","name","TimeoutError","isObject","value","validateAndMerge","_len","arguments","length","sources","Array","_key","source","isArray","undefined","TypeError","deepMerge","mergeHeaders","source1","source2","result","globalThis","Headers","isHeadersInstance","key","entries","delete","set","returnValue","headers","_len2","_key2","supportsRequestStreams","duplexAccessed","hasContentType","supportsReadableStream","ReadableStream","supportsRequest","Request","body","method","duplex","has","supportsAbortController","AbortController","supportsResponseStreams","supportsFormData","FormData","requestMethods","responseTypes","json","text","formData","arrayBuffer","blob","maxSafeTimeout","stop","Symbol","kyOptionKeys","parseJson","searchParams","prefixUrl","retry","timeout","hooks","throwHttpErrors","onDownloadProgress","fetch","requestOptionsRegistry","mode","credentials","cache","redirect","referrer","referrerPolicy","integrity","keepalive","signal","window","dispatcher","normalizeRequestMethod","input","includes","toUpperCase","retryAfterStatusCodes","defaultRetryOptions","limit","methods","statusCodes","afterStatusCodes","maxRetryAfter","Number","POSITIVE_INFINITY","backoffLimit","delay","attemptCount","normalizeRetryOptions","Ky","create","ky","function_","async","_options","RangeError","Promise","resolve","_fetch","hook","afterResponse","modifiedResponse","_decorateResponse","clone","Response","ok","error","beforeError","_stream","toLowerCase","_retry","type","mimeType","get","byteLength","_options$method","_options$timeout","_options$fetch","_input","isCredentialsSupported","prototype","beforeRequest","beforeRetry","String","bind","URL","startsWith","endsWith","abortController","originalSignal","addEventListener","abort","replace","URLSearchParams","toString","url","_this$_options$header","JSON","stringify","_calculateRetryDelay","_retryCount","retryAfter","after","isNaN","Date","parse","now","retryDelay","Math","min","ms","_ref","reject","abortHandler","clearTimeout","timeoutId","throwIfAborted","once","setTimeout","removeEventListener","retryCount","nonRequestOptions","findUnknownOptions","unknownOptions","init","then","catch","totalBytes","transferredBytes","percent","Uint8Array","start","controller","reader","getReader","read","done","close","enqueue","createInstance","defaults","newDefaults","extend"],"sourceRoot":""}